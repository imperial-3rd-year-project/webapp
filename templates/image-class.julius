let dataURL;

const w = 640;
const h = 480;
const p = w * h;

// Square on webcam
let sqStrokeWidth = 4,
    sqWidth = 224,
    webSquare = { x: (w - (sqWidth + sqStrokeWidth)) / 2, y: (h - (sqWidth + sqStrokeWidth)) / 2 },
    sqMouse = {},
    isMoving = false;

window.onload = function () {
    let webcamCanvas = document.getElementById("canvas");
    let webcamCtx = webcamCanvas.getContext("2d");
    // Setup webcam canvas
    webcamCtx.fillRect(0, 0, webcamCanvas.width, webcamCanvas.height);
    webcamCanvas.addEventListener('mousedown', function (e) {
        sqMouse.x = e.pageX;
        sqMouse.y = e.pageY;
        isMoving = true;
    });

    webcamCanvas.addEventListener('mousemove', function (e) {
        if (isMoving) {
            let move = { x: e.pageX - sqMouse.x, y: e.pageY - sqMouse.y };
            // Move the rectangle on screen
            webSquare = { x: webSquare.x + move.x, y: webSquare.y + move.y };
            sqMouse.x = e.pageX;
            sqMouse.y = e.pageY;
        }
    });

    webcamCanvas.addEventListener('mouseup', function (e) {
        isMoving = false;
    });

    // Setup sockets
    let initialState = {
        webcamCanvas: webcamCanvas,
        webcamCtx: webcamCtx,
        fetchingResnet: false,
        isLabel: true,
        resnetCounter: 0,
        webcamPaused: false,
        recognisedObject: {}
    };
    let state = buildState(initialState).withWebcam().build();

    initialiseSocket(state);
    // Order is important!
    addSocketHandler(SOCKET_BEGIN_DEVICES, onBeginDevices);
    addSocketHandler(SOCKET_END_DEVICES, onEndDevices);
    addSocketHandler(SOCKET_RECEIVE_DEVICE, onReceiveDevice);
    
    addSocketHandler(SOCKET_BEGIN_RESNET, onResBegin);
    addSocketHandler(SOCKET_END_RESNET, onResEnd);
    addSocketHandler(SOCKET_RECEIVE_RESNET, onResReceive);
    
    addSocketHandler(SOCKET_RECEIVE_WEBCAM_FRAME, onWebcamFrame);
    setSocketHandler();

    // Switch input modes
    const inputCheckbox = document.getElementById("image-input-checkbox");
    inputCheckbox.addEventListener('change', function (event) {
        if (event.target.checked) {
            // Webcam mode 
            document.getElementById("webcam-input-div").style.display = 'block';
            document.getElementById("upload-image-div").style.display = 'none';
        } else {
            // Upload image
            document.getElementById("webcam-input-div").style.display = 'none';
            document.getElementById("upload-image-div").style.display = 'block';
        }

        document.getElementById("object-label").innerHTML = '';
    });

    document.getElementById("upload-image-input").onchange = function (event) {
        let input = event.target;
        let reader = new FileReader();
        document.getElementById("object-label").innerHTML = "I'm trying to work out what I'm looking at, just a moment...";
        reader.onload = function () {
            dataURL = reader.result;
            let img = new Image();
            let output = document.getElementById('uploaded-image');
            let ctx = output.getContext('2d');
            img.onload = function () {
                if (img.width > img.height) {
                    let w = img.width * (224 / img.height);
                    ctx.drawImage(img, 0, 0, w, 224);
                } else {
                    let h = img.height * (224 / img.width);
                    ctx.drawImage(img, 0, 0, 224, h);
                }
                console.log("Sending buffer...");
                sendMsg(IMAGE.RESNET);
                let buff = ctx.getImageData(0, 0, 224, 224).data.buffer;
                sendData(buff);

            };
            img.src = dataURL;
        };
        reader.readAsDataURL(input.files[0]);
    };
};

function openWebcam() {
    let deviceSelect = document.getElementById("devices");
    let device = deviceSelect.value.split(":")[0];
    sendMsg(WEBCAM.OPEN, device);
    document.getElementById("webcam-btn").value = "Close Webcam"
    document.getElementById("webcam-btn").onclick = closeWebcam;
}

function closeWebcam() {
    sendMsg(WEBCAM.CLOSE);
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    let webcamCanvas = document.getElementById("canvas");
    let webcamCtx = webcamCanvas.getContext("2d");
    document.getElementById("webcam-btn").value = "Open Webcam"
    document.getElementById("webcam-btn").onclick = openWebcam;
}

function captureImage() {
    document.getElementById("object-label").innerHTML = "I'm trying to work out what I'm looking at, just a moment...";
    webcamPaused = true;
    socket.send('CAPTURE RESNET');
    socket.send(webSquare.x.toString());
    socket.send(webSquare.y.toString());
}

function onResBegin(event, state) {
    state.fetchingResnet = true;
    state.resnetCounter = 0;
    state.isLabel = true;
}

function onResEnd(event, state) {
    state.fetchingResnet = false;
    document.getElementById("object-label").innerHTML = generateObjectSentence(state.recognisedObject.label);
    state.webcamPaused = false;
}

function onResReceive(event, state) {
    state.recognisedObject.label = event.data;
}

function onWebcamFrame(event, state) {
    drawWebcamImage(event, state);

    state.webcamCtx.beginPath();
    state.webcamCtx.rect(webSquare.x, webSquare.y, sqWidth, sqWidth);
    state.webcamCtx.lineWidth = sqStrokeWidth;
    state.webcamCtx.setLineDash([15, 5]);
    state.webcamCtx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
    state.webcamCtx.stroke();

    if (state.webcamPaused) {
        state.webcamCtx.fillStyle = 'rgba(255, 255, 255, 0.5)';
        state.webcamCtx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    }
}

const sentences = [
    { prefix: "Looks like a good old", suffix: "to me", article: false },
    { prefix: "I'm quite sure that's a lovely", suffix: "", article: false },
    { prefix: "How exotic! I have never seen a", suffix: "like that before", article: true }
];

function generateObjectSentence(label) {
    const template = sentences[Math.floor(Math.random() * sentences.length)];
    let w = (template.article && ['a', 'e', 'i', 'o', 'u'].includes(label[0])) ? "n" : "";
    return template.prefix + w + " <strong>" + label.split(",")[0] + "</strong> " + template.suffix;
}
