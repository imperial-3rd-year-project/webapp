let canvas, ctx, flag = false,
		prevX = 0,
		currX = 0,
		prevY = 0,
		currY = 0l

const colour = "black",
	  thickness = 10;

let imageData = [];

window.onload = function() {
	canvas = document.getElementById(#{toJSON canvasId});
	ctx = canvas.getContext("2d");
	w = canvas.width;
	h = canvas.height;

	canvas.addEventListener("mousemove", function (e) {
		findxy('move', e)
	}, false);
	canvas.addEventListener("mousedown", function (e) {
		findxy('down', e)
	}, false);
	canvas.addEventListener("mouseup", function (e) {
		findxy('up', e)
	}, false);
	canvas.addEventListener("mouseout", function (e) {
		findxy('out', e)
	}, false);
};


function draw() {
    const mouseX = currX;
    const mouseY = currY;
    const lastX = prevX;
    const lastY = prevY;

    let x1 = mouseX,
        x2 = lastX,
        y1 = mouseY,
        y2 = lastY;


    const steep = Math.abs(y2 - y1) > Math.abs(x2 - x1);
    if (steep){
        const x = x1;
        x1 = y1;
        y1 = x;

        const y = y2;
        y2 = x2;
        x2 = y;
    }
    if (x1 > x2) {
        const x = x1;
        x1 = x2;
        x2 = x;

        const y = y1;
        y1 = y2;
        y2 = y;
    }

    let dx = x2 - x1,
        dy = Math.abs(y2 - y1),
        error = 0,
        de = dy / dx,
        yStep = -1,
        y = y1;
        
    if (y1 < y2) {
        yStep = 1;
    }
       
       
    for (let x = x1; x < x2; x++) {
        ctx.beginPath();
        if (steep) {
            ctx.arc(y, x, thickness, 0, 6);
            ctx.fill();
        } else {
            ctx.arc(x, y, thickness, 0, 6);
            ctx.fill();
        }
        ctx.closePath();
        error += de;
        if (error >= 0.5) {
            y += yStep;
            error -= 1.0;
        }
    }

}

function erase() {
	ctx.clearRect(0, 0, w, h);
}

function findxy(res, e) {
	if (res == 'down') {
		prevX = currX;
		prevY = currY;
		const {x, y} = canvas.getBoundingClientRect();
		currX = e.clientX - x;
		currY = e.clientY - y;
		flag = true;
	}
	if (res == 'up' || res == "out") {
		flag = false;
		sendCanvasBytes(e);
	}
	if (res == 'move') {
		if (flag) {
			prevX = currX;
			prevY = currY;
			const {x, y} = canvas.getBoundingClientRect();
			currX = e.clientX - x;
			currY = e.clientY - y;
			draw();
		}
	}
}

function sendCanvasBytes(event) {
    function base64EncodeUnicode(str) {
        // First we escape the string using encodeURIComponent to get the UTF-8 encoding of the characters, 
        // then we convert the percent encodings into raw bytes, and finally feed it to btoa() function.
        utf8Bytes = encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
            return String.fromCharCode('0x' + p1);
        });
  
      return btoa(utf8Bytes);
  }


    event.preventDefault();

    const canvasData = ctx.getImageData(0,0,w,h);
    const canvasBuffer = canvasData.data.buffer;
    var convertedCanvas = [];
    canvasData.data.forEach(function(byte) {convertedCanvas.push(String.fromCharCode(byte))});
    const base64Canvas = btoa(convertedCanvas);

	let postData = JSON.stringify(base64Canvas);
    console.log("POSTDATA:");
    console.log(postData);

	$.ajax({
		url: '@{MnistResponseR}',
		type: 'POST',
		contentType: "application/json",
		data: postData,
		success: function (data) {
			console.log("data ?");
			console.log(data);
			document.getElementById(#{toJSON mnistDataId}).innerHTML = data;

		},
		error: function (data) {
			console.log("Error creating comment: " + data);
		},
	});
}


